@model Logement.ViewModels.ApartmentBaseInfos

@{
    ViewData["Title"] = "Apartment Details";

    // Temporary sample data for Members and Tenancies
    var members = new List<string> { "Member 1", "Member 2", "Member 3", "Member 4", "Member 5", "Member 6" };
    var tenancies = new List<string> { "Tenant A", "Tenant B", "Tenant C", "Tenant D", "Tenant E", "Tenant F" };
}

<style>
    body {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f5f7fa;
        margin: 0;
        padding: 0;
    }

    .page-container {
        display: flex;
        flex-direction: row;
        max-width: 1300px;
        margin: 0 auto;
        padding: 30px 20px;
        gap: 20px;
    }

    .main-content {
        flex: 3;
    }

    .sidebar {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .content-header h1 {
        font-size: 32px;
        margin-bottom: 20px;
        color: #1e3a8a;
        border-bottom: 2px solid #cbd5e1;
        padding-bottom: 10px;
    }

    .apartment-info {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
        padding: 20px;
        margin-bottom: 30px;
    }

        .apartment-info h3 {
            font-size: 24px;
            color: #111827;
            margin-bottom: 20px;
        }

    .details-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
    }

        .details-grid p {
            margin-bottom: 15px;
            font-size: 16px;
            color: #374151;
            background-color: #f9fafb;
            padding: 12px;
            border-radius: 6px;
            border: 1px solid #e5e7eb;
        }

    .image-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 15px;
    }

    .image-card img {
        width: 100%;
        height: 180px;
        object-fit: cover;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
    }

    .card {
        background-color: #ffffff;
        border-radius: 8px;
        padding: 16px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.04);
    }

        .card h4 {
            margin-bottom: 10px;
            color: #1f2937;
            font-size: 18px;
            cursor: pointer;
            user-select: none;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            padding-right: 120px; /* room for add button */
        }

            .card h4::after {
                content: "▼";
                font-size: 12px;
                transition: transform 0.3s ease;
                position: absolute;
                right: 12px;
            }

            .card h4.active::after {
                transform: rotate(-180deg);
            }

        .card ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

            .card ul.scrollable {
                max-height: 200px;
                overflow-y: auto;
            }

        .card h4.active + ul {
            max-height: 500px;
        }

        .card ul li {
            padding: 5px 0;
            color: #4b5563;
            border-bottom: 1px solid #f3f4f6;
        }

        .add-button {
            background-color: #14b8a6; /* teal */
            color: white;
            padding: 6px 12px;
            border-radius: 16px;
            font-weight: 600;
            font-size: 13px;
            cursor: pointer;
            user-select: none;
            border: none;
            outline: none;
            margin-left: 12px;
            display: inline-block;
            min-width: 50px;
            text-align: center;
            line-height: 1;
        }

        .add-button:hover {
            background-color: #0f766e; /* darker teal */
        }

    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 480px; /* Reduced max width */
        width: 90%; /* Responsive width for smaller screens */
        margin: auto;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

        .modal-content h3 {
            margin-top: 0;
            color: #111827;
            font-weight: 700;
            font-size: 22px;
        }

        .modal-content input {
            width: 100%;
            padding: 12px 14px;
            margin-top: 15px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 16px;
            color: #374151;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }

            .modal-content input:focus {
                outline: none;
                border-color: #14b8a6;
                box-shadow: 0 0 5px #14b8a6aa;
            }

    .modal-actions {
        margin-top: 20px;
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

        .modal-actions button {
            background-color: #14b8a6;
            color: white;
            padding: 10px 18px;
            font-size: 15px;
            font-weight: 600;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .modal-actions button:hover {
                background-color: #0f766e;
            }

            .modal-actions button:last-child {
                background-color: #e0e0e0;
                color: #374151;
            }

                .modal-actions button:last-child:hover {
                    background-color: #bdbdbd;
                }
</style>

<div class="page-container">
    <!-- Main Left Section -->
    <div class="main-content">
        <section class="content-header">
            <h1>Apartment Details</h1>
        </section>

        <div class="apartment-info">
            <h3>Apartment Number: @Model.ApartmentInfos.Id</h3>
            <div class="details-grid">
                <div>
                    <p><strong>City Name:</strong><br />@Model.ApartmentInfos.CityName</p>
                    <p><strong>Located at:</strong><br />@Model.ApartmentInfos.LocatedAt</p>
                    <p><strong>Number of Rooms:</strong><br />@Model.ApartmentInfos.NumberOfRooms</p>
                    <p><strong>Room Area:</strong><br />@Model.ApartmentInfos.RoomArea</p>
                </div>
                <div>
                    <p><strong>Number of Bathrooms:</strong><br />@Model.ApartmentInfos.NumberOfbathRooms</p>
                    <p><strong>Floor Number:</strong><br />@Model.ApartmentInfos.FloorNumber</p>
                    <p><strong>Price:</strong><br />@Model.ApartmentInfos.Price</p>
                </div>
            </div>
        </div>

        <div class="image-container">
            @foreach (var image in Model.ApartmentImages)
            {
                <div class="image-card">
                    <img src="data:@image.ContentType;base64,@Convert.ToBase64String(image.Data)" alt="Apartment Image" />
                </div>
            }
        </div>
    </div>

    <!-- Sidebar Section -->
    <div class="sidebar">
        <!-- Members Accordion -->
        <div class="card">
            <h4 class="accordion-header" onclick="toggleAccordion(this)">
                Members
                <button class="add-button" onclick="event.stopPropagation(); openModal('member')">+ Add</button>
            </h4>
            <ul class="@(members.Count >= 8 ? "scrollable" : "")">
                @foreach (var member in members)
                {
                    <li>@member</li>
                }
            </ul>
        </div>

        <!-- Tenancies Accordion -->
        <div class="card">
            <h4 class="accordion-header" onclick="toggleAccordion(this)">
                Tenancies
                <button class="add-button" onclick="event.stopPropagation(); openModal('tenancy')">+ Add</button>
            </h4>
            <ul class="@(tenancies.Count >= 8 ? "scrollable" : "")">
                @foreach (var tenant in tenancies)
                {
                    <li>@tenant</li>
                }
            </ul>
        </div>
    </div>
</div>

<!-- Modal -->
<div id="addModal" class="modal-overlay" style="display:none;">
    <div class="modal-content">
        <h3 id="modalTitle">Add Item</h3>
        <input type="text" id="modalInput" placeholder="Enter name..." />
        <div class="modal-actions">
            <button onclick="submitModal()">Submit</button>
            <button onclick="closeModal()">Cancel</button>
        </div>
    </div>
</div>

<script>
    let currentType = ''; // "member" or "tenancy"

    // Toggle the accordion open/close
    function toggleAccordion(header) {
        header.classList.toggle("active");
        const list = header.nextElementSibling;
        if (list.style.maxHeight && list.style.maxHeight !== "0px") {
            list.style.maxHeight = "0px";
        } else {
            list.style.maxHeight = list.scrollHeight + "px";
        }
    }

    // Open modal and set context
    function openModal(type) {
        currentType = type;
        document.getElementById('modalTitle').innerText = `Add ${type === 'member' ? 'Member' : 'Tenancy'}`;
        document.getElementById('modalInput').value = '';
        document.getElementById('addModal').style.display = 'flex';
        document.getElementById('modalInput').focus();
    }

    // Close modal
    function closeModal() {
        document.getElementById('addModal').style.display = 'none';
    }

    // Submit input and append to the correct list
    function submitModal() {
        const value = document.getElementById('modalInput').value.trim();
        if (!value) return;

        // Find the correct <ul> based on currentType
        const listSelector = currentType === 'member'
            ? '.card:nth-of-type(1) ul'
            : '.card:nth-of-type(2) ul';

        const list = document.querySelector(listSelector);

        const li = document.createElement('li');
        li.textContent = value;
        list.appendChild(li);

        // Auto-expand if it was collapsed
        const header = list.previousElementSibling;
        if (!header.classList.contains('active')) {
            toggleAccordion(header);
        }

        closeModal();
    }
</script>